---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a new ECS First Run stack
Parameters:
  EcsAmiId:
    Type: String
    Description: ECS AMI Id
    Default: ami-e3b75981
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: String
    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to
      the ECS instances
    Default: 'EC2_KEY'
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '2'
  CertArn:
    Type: String
    Description: Arn of the Loadbalancer certificate
  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
    Default: test-ecs
  EcsPort:
    Type: String
    Description: Optional - Security Group port to open on ECS instances - defaults
      to port 80
    Default: '80'
  ElbPort:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open
      by default
    Default: '80'
  ElbPort2:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open
      by default
    Default: '443'
  ElbHealthCheckTarget:
    Type: String
    Description: Optional - Health Check Target for ELB - defaults to HTTP:80/
    Default: ''
  RedirectImage:
    Type: String
    Description: http redirection container image to use 
  WebImage:
    Type: String
    Description: http redirection container image to use 
    Default: 292102423562.dkr.ecr.ap-southeast-2.amazonaws.com/instance-id:latest
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsEndpoint:
    Type: String
    Description: 'Optional : ECS Endpoint for the ECS Agent to connect to'
    Default: ''
  CreateElasticLoadBalancer:
    Type: String
    Description: 'Optional : When set to true, creates a ELB for ECS Service'
    Default: 'true'
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: 'Optional : Comma-delimited list of two VPC availability zones in
      which to create subnets'
    Default: 'ap-southeast-2a,ap-southeast-2b,ap-southeast-2c'
  VpcCidrBlock:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.0.0.0/16
  SubnetCidrBlock1:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.0.0.0/24
  SubnetCidrBlock2:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.0.1.0/24
Conditions:
  SetEndpointToECSAgent:
    Fn::Not:
    - Fn::Equals:
      - Ref: EcsEndpoint
      - ''
  UseDynamicPorts:
    Fn::Equals:
    - Ref: EcsPort
    - '0'
  CreateELB:
    Fn::Equals:
    - Ref: CreateElasticLoadBalancer
    - 'true'
  CreateEC2LCWithKeyPair:
    Fn::Not:
    - Fn::Equals:
      - Ref: KeyName
      - ''
  UseSpecifiedVpcAvailabilityZones:
    Fn::Not:
    - Fn::Equals:
      - Fn::Join:
        - ''
        - Ref: VpcAvailabilityZones
      - ''
Resources:
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - ecsInstanceRole
      InstanceProfileName: EcsTestInstanceProfile
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: SubnetCidrBlock1
      AvailabilityZone:
        Fn::If:
        - UseSpecifiedVpcAvailabilityZones
        - Fn::Select:
          - '0'
          - Ref: VpcAvailabilityZones
        - Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: SubnetCidrBlock2
      AvailabilityZone:
        Fn::If:
        - UseSpecifiedVpcAvailabilityZones
        - Fn::Select:
          - '1'
          - Ref: VpcAvailabilityZones
        - Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubnetAz1
      RouteTableId:
        Ref: RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubnetAz2
      RouteTableId:
        Ref: RouteViaIgw
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        Fn::If:
        - CreateELB
        - - IpProtocol: tcp
            FromPort: '1'
            ToPort: '65535'
            SourceSecurityGroupId:
              Ref: AlbSecurityGroup
        - - IpProtocol: tcp
            FromPort:
              Fn::If:
              - UseDynamicPorts
              - '49153'
              - Ref: EcsPort
            ToPort:
              Fn::If:
              - UseDynamicPorts
              - '65535'
              - Ref: EcsPort
            CidrIp:
              Ref: SourceCidr
  AlbSecurityGroup:
    Condition: CreateELB
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort:
          Ref: ElbPort
        ToPort:
          Ref: ElbPort
        CidrIp:
          Ref: SourceCidr
      - IpProtocol: tcp
        FromPort:
          Ref: ElbPort2
        ToPort:
          Ref: ElbPort2
        CidrIp:
          Ref: SourceCidr
  EcsElasticLoadBalancer:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-test
      SecurityGroups:
      - Ref: AlbSecurityGroup
      Subnets:
      - Ref: PubSubnetAz1
      - Ref: PubSubnetAz2
      Scheme: internet-facing
  LoadBalancerListener:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: EcsElasticLoadBalancer
      Port:
        Ref: ElbPort
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LoadBalancerTargetGroup
  LoadBalancerListenerWeb:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertArn
      LoadBalancerArn:
        Ref: EcsElasticLoadBalancer
      Port:
        Ref: ElbPort2
      Protocol: HTTPS
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LoadBalancerTargetGroupWeb
  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: EcsAmiId
      InstanceType:
        Ref: EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !GetAtt InstanceProfile.Arn
      KeyName:
        Fn::If:
        - CreateEC2LCWithKeyPair
        - Ref: KeyName
        - Ref: AWS::NoValue
      SecurityGroups:
      - Ref: EcsSecurityGroup
      UserData:
        Fn::If:
        - SetEndpointToECSAgent
        - Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - echo ECS_CLUSTER=
              - Ref: EcsClusterName
              - " >> /etc/ecs/ecs.config"
              - |2-

                echo ECS_BACKEND_HOST=
              - Ref: EcsEndpoint
              - " >> /etc/ecs/ecs.config"
        - Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - echo ECS_CLUSTER=
              - Ref: EcsClusterName
              - " >> /etc/ecs/ecs.config"
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::Join:
        - ","
        - - Ref: PubSubnetAz1
          - Ref: PubSubnetAz2
      LaunchConfigurationName:
        Ref: EcsInstanceLc
      MinSize: '2'
      MaxSize:
        Ref: AsgMaxSize
      DesiredCapacity:
        Ref: AsgMaxSize
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - 'ECS Instance - '
            - Ref: AWS::StackName
        PropagateAtLaunch: 'true'
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: 'test-ecs-loggroup'
      RetentionInDays: 30
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: main # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref RedirectImage
        Memory: 300
        PortMappings:
        - ContainerPort: 80 # if you change this, you also must change the AWS::ECS::Service
          HostPort: 8080
          Protocol: tcp
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': !Ref 'LogGroup'
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
  TaskDefinitionWeb:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: WebImage # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref WebImage
        Memory: 600
        PortMappings:
        - ContainerPort: 80 # if you change this, you also must change the AWS::ECS::Service
          HostPort: 4433
          Protocol: tcp
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': !Ref 'LogGroup'
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 2
      MinCapacity: 2
      ResourceId: !Sub
      - 'service/${EcsClusterName}/${Service}'
      - Cluster: !Ref 'EcsClusterName'
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScalableTargetWeb:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 2
      MinCapacity: 2
      ResourceId: !Sub
      - 'service/${EcsClusterName}/${Service}'
      - Cluster: !Ref 'EcsClusterName'
        Service: !GetAtt 'WebService.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '301'
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  LoadBalancerTargetGroupWeb:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: 
      - LoadBalancerListener
      - EcsInstanceAsg
    Properties:
      Cluster: !Ref 'EcsClusterName'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: main
        ContainerPort: 80
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
  WebService:
    Type: 'AWS::ECS::Service'
    DependsOn: 
      - LoadBalancerListener
      - EcsInstanceAsg
    Properties:
      Cluster: !Ref 'EcsClusterName'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: WebImage
        ContainerPort: 80
        TargetGroupArn: !Ref LoadBalancerTargetGroupWeb
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinitionWeb

Outputs:
  EcsInstanceAsgName:
    Description: Auto Scaling Group Name for ECS Instances
    Value:
      Ref: EcsInstanceAsg
  EcsElbName:
    Description: Load Balancer for ECS Service
    Value:
      Fn::If:
      - CreateELB
      - !GetAtt EcsElasticLoadBalancer.DNSName
      - ''

